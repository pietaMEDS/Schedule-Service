const axios = require('axios');
function formatScheduleMessage(data, type) {
    if (!data || !data.length) {
        return '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.\n–û–±—ã—á–Ω–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }

    const daysOfWeek = {
        'MONDAY': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'TUESDAY': '–í—Ç–æ—Ä–Ω–∏–∫',
        'WEDNESDAY': '–°—Ä–µ–¥–∞',
        'THURSDAY': '–ß–µ—Ç–≤–µ—Ä–≥',
        'FRIDAY': '–ü—è—Ç–Ω–∏—Ü–∞',
        'SATURDAY': '–°—É–±–±–æ—Ç–∞',
        'SUNDAY': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    };

    const daysOrder = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
    const today = new Date();
    const currentDay = today.getDay();

    let daysToShow;

    const requestDate = getRequestDate(today, currentDay);

    const replacementResponse =  checkReplacementExist(requestDate);

    if (!replacementResponse.status) {
        daysToShow = getReducedDaysToShow(currentDay);
    } else {
        daysToShow = getExtendedDaysToShow(currentDay);
    }
    console.log(requestDate)

    const groupedSchedule = data.reduce((acc, item) => {
        const day = item.dayOfWeek;
        if (daysToShow.includes(day)) {
            if (!acc[day]) {
                acc[day] = [];
            }
            acc[day].push(item);
        }
        return acc;
    }, {});
    console.log(groupedSchedule)

    let scheduleMessage = '';

    daysOrder.forEach(day => {
        if (groupedSchedule[day]) {
            groupedSchedule[day].sort((a, b) => a.ordinal - b.ordinal);

            const dayDate = getNextDayDate(today, day);

            if(type === 'teacher'){
                scheduleMessage += `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${groupedSchedule[day][0].teacher} \n${daysOfWeek[day]} ${dayDate.toLocaleDateString('ru-RU')}:\n`;
            }
            else if(type === 'classrooms'){
                scheduleMessage += `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${groupedSchedule[day][0].location} \n${daysOfWeek[day]} ${dayDate.toLocaleDateString('ru-RU')}:\n`;
            }
            else {
                scheduleMessage += `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupedSchedule[day][0].group.title} \n${daysOfWeek[day]} ${dayDate.toLocaleDateString('ru-RU')}:\n`;
            }

            groupedSchedule[day].forEach((lesson) => {
                const ordinalEmoji = getOrdinalEmoji(lesson.ordinal);
                let lessonMessage = '';

                if (lesson.subject === '------------') {
                    lessonMessage = `${ordinalEmoji} ‚ùå –ü–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞`;
                }
                else if (lesson.subject.includes('(–°–∞–º.—Ä–∞–±)')) {
                    lessonMessage = `${ordinalEmoji} ${lesson.subject}`;
                } else {
                    lessonMessage = `${ordinalEmoji}`;

                    const isPencilReplacement = lesson.isReplacement === true;
                    if (isPencilReplacement) {
                        lessonMessage += ' ‚úèÔ∏è';
                    }

                    lessonMessage += ` ${lesson.subject}`;
                    lessonMessage += ` üéì${lesson.teacher} üö™${lesson.location}`;

                    if (type === 'teacher' || type === 'classrooms') {
                        lessonMessage += ` - ${lesson.group.title}`;
                        if (lesson.subgroup !== 0) {
                            lessonMessage += ` (${lesson.subgroup})`;
                        }
                    }

                    lessonMessage += ` ${getOrdinalTime(lesson.ordinal)}`;
                }

                scheduleMessage += lessonMessage + '\n';
            });

            scheduleMessage += '\n';
        }
    });

    return scheduleMessage;
}

async function checkReplacementExist(date) {
    try {
        const response = await axios.get(`${process.env.HOST}/replacementexist`, {
            params: { date }
        });
        return response.data;
    } catch (error) {
        return { status: false };
    }
}

function getRequestDate(today, currentDay) {
    const daysMap = {
        1: 'THURSDAY',
        2: 'THURSDAY',
        3: 'THURSDAY',
        4: 'MONDAY',
        5: 'MONDAY',
        6: 'MONDAY',
        0: 'MONDAY',
    };

    let requestedDay = daysMap[currentDay];
    const requestedDate = getNextDayDate(today, requestedDay);
    return requestedDate.toISOString().split('T')[0];
}
function getExtendedDaysToShow(currentDay) {
    switch (currentDay) {
        case 1:
            return ['TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
        case 2:
            return ['WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
        case 4:
            return ['THURSDAY', 'FRIDAY', 'SATURDAY'];
        case 5:
            return ['FRIDAY', 'SATURDAY'];
        default:
            return [];
    }
}

function getReducedDaysToShow(currentDay) {
    switch (currentDay) {
        case 1:
            return ['MONDAY', 'TUESDAY', 'WEDNESDAY'];
        case 2:
            return ['TUESDAY', 'WEDNESDAY'];
        case 3:
            return ['WEDNESDAY'];
        case 4:
            return ['THURSDAY', 'FRIDAY', 'SATURDAY'];
        case 5:
            return ['FRIDAY', 'SATURDAY'];
        case 6:
            return ['SATURDAY'];
        default:
            return [];
    }
}

function getOrdinalEmoji(ordinal) {
    const emojiMap = {
        1: '1Ô∏è‚É£',
        2: '2Ô∏è‚É£',
        3: '3Ô∏è‚É£',
        4: '4Ô∏è‚É£',
        5: '5Ô∏è‚É£',
        6: '6Ô∏è‚É£',
        7: '7Ô∏è‚É£',
        8: '8Ô∏è‚É£'
    };

    return emojiMap[ordinal] || `${ordinal}Ô∏è‚É£`;
}

function getOrdinalTime(ordinal) {
    const TimeMap = {
        1: 'üï£08:30-10:00',
        2: 'üïô10:10-11:40',
        3: 'üïß12:20-13:50',
        4: 'üïù14:20-15:50',
        5: 'üïì16:00-17:30',
        6: 'üï†17:40-19:10',
        7: 'üï¢19:20-20:50',
    };

    return TimeMap[ordinal];
}

function getNextDayDate(today, day) {
    const daysMap = {
        'MONDAY': 1,
        'TUESDAY': 2,
        'WEDNESDAY': 3,
        'THURSDAY': 4,
        'FRIDAY': 5,
        'SATURDAY': 6,
        'SUNDAY': 0
    };
    const daysUntilNext = (daysMap[day] + 7 - today.getDay()) % 7;
    const nextDay = new Date(today);
    nextDay.setDate(today.getDate() + daysUntilNext);
    return nextDay;
}

module.exports = { formatScheduleMessage };
