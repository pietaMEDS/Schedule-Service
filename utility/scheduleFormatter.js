function formatScheduleMessage(data, includeGroup = false) {
    if (!data || !data.length) {
        return '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.';
    }

    const daysOfWeek = {
        'MONDAY': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'TUESDAY': '–í—Ç–æ—Ä–Ω–∏–∫',
        'WEDNESDAY': '–°—Ä–µ–¥–∞',
        'THURSDAY': '–ß–µ—Ç–≤–µ—Ä–≥',
        'FRIDAY': '–ü—è—Ç–Ω–∏—Ü–∞',
        'SATURDAY': '–°—É–±–±–æ—Ç–∞',
        'SUNDAY': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    };

    const daysOrder = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
    const today = new Date();
    const currentDay = today.getDay();

    let daysToShow = getDaysToShow(currentDay);

    const groupedSchedule = data.reduce((acc, item) => {
        const day = item.dayOfWeek;
        if (daysToShow.includes(day)) {
            if (!acc[day]) {
                acc[day] = [];
            }
            acc[day].push(item);
        }
        return acc;
    }, {});

    let scheduleMessage = '';

    if (currentDay === 6) {
        const reorderedDays = ['SATURDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY'];
        const otherDays = ['THURSDAY', 'FRIDAY'];

        daysOrder.length = 0;
        daysOrder.push(...reorderedDays, ...otherDays);
    }

    daysOrder.forEach(day => {
        if (groupedSchedule[day]) {
            groupedSchedule[day].sort((a, b) => a.ordinal - b.ordinal);
            scheduleMessage += `${daysOfWeek[day]}\n`;

            groupedSchedule[day].forEach((lesson) => {
                const ordinalEmoji = getOrdinalEmoji(lesson.ordinal);
                let lessonMessage = '';

                if (lesson.subject === '------------') {
                    lessonMessage = `${ordinalEmoji} ‚ùå –ü–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞`;
                }
                else if (lesson.subject.includes('(–°–∞–º.—Ä–∞–±)')) {
                    lessonMessage = `${ordinalEmoji} ${lesson.subject}`;
                } else {
                    lessonMessage = `${ordinalEmoji}`;

                    const isPencilReplacement = lesson.isReplacement === true;
                    if (isPencilReplacement) {
                        lessonMessage += ' ‚úèÔ∏è';
                    }

                    lessonMessage += ` ${lesson.subject}`;

                    lessonMessage += ` üéì${lesson.teacher} üö™${lesson.location}`;
                    
                    lessonMessage += ` ${getOrdinalTime(lesson.ordinal)} `;

                    if (includeGroup) {
                        lessonMessage += ` - ${lesson.group.title}`;
                        if (lesson.subgroup !== 0) {
                            lessonMessage += ` (${lesson.subgroup})`;
                        }
                    }
                }

                scheduleMessage += lessonMessage + '\n';
            });

            scheduleMessage += '\n';
        }
    });

    return scheduleMessage;
}

function getDaysToShow(currentDay) {
    switch (currentDay) {
        case 0:
            return ['MONDAY', 'TUESDAY', 'WEDNESDAY'];
        case 1:
            return ['MONDAY', 'TUESDAY', 'WEDNESDAY'];
        case 2:
            return ['TUESDAY', 'WEDNESDAY'];
        case 3:
            return ['WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
        case 4:
            return ['THURSDAY', 'FRIDAY', 'SATURDAY'];
        case 5:
            return ['FRIDAY', 'SATURDAY'];
        case 6:
            return ['SATURDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY'];
        default:
            return [];
    }
}

function getOrdinalEmoji(ordinal) {
    const emojiMap = {
        1: '1Ô∏è‚É£',
        2: '2Ô∏è‚É£',
        3: '3Ô∏è‚É£',
        4: '4Ô∏è‚É£',
        5: '5Ô∏è‚É£',
        6: '6Ô∏è‚É£',
        7: '7Ô∏è‚É£',
        8: '8Ô∏è‚É£'
    };

    return emojiMap[ordinal] || `${ordinal}Ô∏è‚É£`;
}

function getOrdinalTime(ordinal) {
    const TimeMap = {
        1: 'üï£ 08:30-10:00',
        2: 'üïô 10:10-11:40',
        3: 'üïß 12:20-13:50',
        4: 'üïë 14:00-15:30',
        5: 'üïû 15:40-17:10',
        6: 'üï† 17:20-18:50',
        7: 'üïñ 19:00-20:30',
    };

    return TimeMap[ordinal];
}

module.exports = { formatScheduleMessage };
